{"version":3,"sources":["images/logo.svg","images/logotype.svg","components/NavBar/logo-link/logo-link.component.jsx","components/NavBar/nav-links/nav-links.component.jsx","components/NavBar/hamburger-icon/hamburger-icon.component.jsx","components/NavBar/side-menu/side-menu.component.jsx","components/NavBar/nav-bar/nav-bar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogoLink","className","to","src","LogoIcon","LogoText","style","visibility","position","NavLinks","props","links","map","link","key","target","text","HamburgerIcon","handler","menuState","onClick","SideMenu","NavBar","hamburgerHandler","e","setState","prevState","menu","state","l","only","m","down","this","Component","setDefaultBreakpoints","xs","s","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,8XCgB9BC,EAAW,kBACtB,kBAAC,OAAD,CAAMC,UAAU,YAAYC,GAAI,QAC9B,yBAAKD,UAAU,YAAYE,IAAKC,MAChC,yBAAKH,UAAU,YAAYE,IAAKE,MAChC,0BACEC,MAAO,CACLC,WAAY,SACZC,SAAU,aAHd,mBCdSC,G,MAAW,SAAAC,GACtB,OACE,wBAAIT,UAAU,aACXS,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACnB,wBAAIC,IAAKD,EAAKE,QACZ,kBAAC,OAAD,CAAMb,GAAIW,EAAKE,QAASF,EAAKG,aCP1BC,G,MAAgB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACvC,OACE,yBAAKlB,UAAS,mBAAckB,EAAY,UAAY,IAAMC,QAASF,GACjE,8BACA,8BACA,iCCJOG,G,MAAW,SAAC,GAA0B,IAAxBF,EAAuB,EAAvBA,UAAWR,EAAY,EAAZA,MACpC,OACE,yBAAKV,UAAS,mBAAckB,EAAY,UAAY,KAClD,kBAAC,EAAD,CAAUR,MAAOA,OCgBjBA,EAAQ,CACZ,CAAEK,KAAM,OAAQD,OAAQ,QACxB,CAAEC,KAAM,YAAaD,OAAQ,aAC7B,CAAEC,KAAM,cAAeD,OAAQ,eAC/B,CAAEC,KAAM,OAAQD,OAAQ,QACxB,CAAEC,KAAM,SAAUD,OAAQ,UAC1B,CAAEC,KAAM,YAAaD,OAAQ,cAEVO,E,YACnB,aAAe,IAAD,8BACZ,+CAMFC,iBAAmB,SAAAC,GACjB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEC,MAAOD,EAAUC,UAP5B,EAAKC,MAAQ,CACXD,MAAM,GAHI,E,sEAcZ,OACE,gCACE,yBAAK1B,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,aAAD,CAAY4B,GAAC,EAACC,MAAI,GAChB,kBAAC,EAAD,CAAUnB,MAAOA,MAGrB,kBAAC,aAAD,CAAYoB,GAAC,EAACC,MAAI,GAChB,kBAAC,EAAD,CACEd,QAASe,KAAKV,iBACdJ,UAAWc,KAAKL,MAAMD,OAExB,kBAAC,EAAD,CAAUR,UAAWc,KAAKL,MAAMD,KAAMhB,MAAOA,U,GA5BnBuB,aCtBpCC,gCAAsB,CAAC,CAAEC,GAAI,GAAK,CAAEC,EAAG,KAAO,CAAEN,EAAG,KAAO,CAAEF,EAAG,QCE3CS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBFKG,kBACjB,kBAAC,qBAAD,KACE,kBAAC,EAAD,SEPY,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4b236829.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.968a0893.svg\";","module.exports = __webpack_public_path__ + \"static/media/logotype.8204a4b2.svg\";","import React from 'react';\r\nimport LogoIcon from '../../../images/logo.svg';\r\nimport LogoText from '../../../images/logotype.svg';\r\n\r\nimport './logo-link.styles.css';\r\n\r\nimport {\r\n  Link,\r\n  DirectLink,\r\n  Element,\r\n  Events,\r\n  animateScroll as scroll,\r\n  scrollSpy,\r\n  scroller,\r\n} from 'react-scroll';\r\n\r\nexport const LogoLink = () => (\r\n  <Link className='logo-link' to={'home'}>\r\n    <img className='logo-icon' src={LogoIcon} />\r\n    <img className='logo-text' src={LogoText} />\r\n    <span\r\n      style={{\r\n        visibility: 'hidden',\r\n        position: 'absolute',\r\n      }}\r\n    >\r\n      Alice Cortane\r\n    </span>\r\n  </Link>\r\n);\r\n","import React from 'react';\r\n\r\nimport './nav-links.styles.css';\r\n\r\nimport { Link } from 'react-scroll';\r\n\r\nexport const NavLinks = props => {\r\n  return (\r\n    <ul className='nav-links'>\r\n      {props.links.map(link => (\r\n        <li key={link.target}>\r\n          <Link to={link.target}>{link.text}</Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './hamburger-icon.styles.css';\r\n\r\nexport const HamburgerIcon = ({ handler, menuState }) => {\r\n  return (\r\n    <div className={`hamburger${menuState ? ' active' : ''}`} onClick={handler}>\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { NavLinks } from '../nav-links/nav-links.component';\r\n\r\nimport './side-menu.styles.css';\r\n\r\nexport const SideMenu = ({ menuState, links }) => {\r\n  return (\r\n    <nav className={`side-menu${menuState ? ' active' : ''}`}>\r\n      <NavLinks links={links} />\r\n    </nav>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\n\r\n// Packages\r\nimport { Breakpoint } from 'react-socks';\r\n\r\n// Stylesheet\r\nimport './nav-bar.styles.css';\r\n\r\n// Functional Components\r\nimport { LogoLink } from '../logo-link/logo-link.component';\r\nimport { NavLinks } from '../nav-links/nav-links.component';\r\nimport { HamburgerIcon } from '../hamburger-icon/hamburger-icon.component';\r\nimport { SideMenu } from '../side-menu/side-menu.component';\r\n\r\n/**\r\n * Text will be rendered by the DOM.\r\n * Example: <a href={links.href}>{links.text}<a/>\r\n *\r\n * Target is the name of the element you want to scroll to on click,\r\n * provided by the 'react-scroll' package.\r\n * Example: <Link to={links.target} /> on click will scroll to <element name={links.target} />\r\n * See https://github.com/fisshy/react-scroll for code examples\r\n */\r\n\r\nconst links = [\r\n  { text: 'Home', target: 'home' },\r\n  { text: 'Biography', target: 'biography' },\r\n  { text: 'Discography', target: 'discography' },\r\n  { text: 'Life', target: 'life' },\r\n  { text: 'Legacy', target: 'legacy' },\r\n  { text: 'Subscribe', target: 'subscribe' },\r\n];\r\nexport default class NavBar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      menu: false,\r\n    };\r\n  }\r\n\r\n  hamburgerHandler = e => {\r\n    this.setState(prevState => {\r\n      return { menu: !prevState.menu };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <nav className='nav-bar'>\r\n          <LogoLink />\r\n          <Breakpoint l only>\r\n            <NavLinks links={links} />\r\n          </Breakpoint>\r\n        </nav>\r\n        <Breakpoint m down>\r\n          <HamburgerIcon\r\n            handler={this.hamburgerHandler}\r\n            menuState={this.state.menu}\r\n          />\r\n          <SideMenu menuState={this.state.menu} links={links} />\r\n        </Breakpoint>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BreakpointProvider, setDefaultBreakpoints } from 'react-socks';\r\n\r\n// Class Components\r\nimport NavBar from './components/NavBar/nav-bar/nav-bar.component';\r\n\r\n// Functional Components\r\nimport { SideMenu } from './components/NavBar/side-menu/side-menu.component';\r\n\r\nsetDefaultBreakpoints([{ xs: 0 }, { s: 376 }, { m: 426 }, { l: 1069 }]);\r\n\r\nexport const App = () => (\r\n  <BreakpointProvider>\r\n    <NavBar />\r\n  </BreakpointProvider>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}